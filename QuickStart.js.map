{"version":3,"sources":["QuickStart.js","QuickStart.ts"],"names":["__extends","d","b","extendStatics","setPrototypeOf","Object","__proto__","Array","p","hasOwnProperty","__","this","constructor","prototype","create","mcscriptstudiocode","require","pluginmanager_1","QuickStart","_super","apply","arguments","setup","server","instance","console","log","openDevTools","start","stop","reload","Plugin","exports"],"mappings":"AAAA,aACA,IAAIA,UAAyC,WAAzCA,IAAAA,EAAa,SAAQC,EAAAC,GAG8D,OAF/EC,EAAAA,OAAgBC,gBAChBD,CAAAA,UAAgBE,cAAOD,OAClB,SAAEE,EAAWJ,GAAbD,EAAAK,UAA6BC,IAA2BN,SAAEK,EAAFJ,GAAA,IAAA,IAAAM,KAAAN,EAAAA,EAAAO,eAAAD,KAAAP,EAAAO,GAAAN,EAAAM,MACzCP,EAAAC,IAAmB,OAAA,SAAIA,EAAEO,GAAiC,SAF9EC,IAAAC,KAAAC,YAAAX,EAEsBE,EAAAF,EAAAC,GACtBD,EAAAY,UAAOV,OAAAA,EAAPE,OAAAS,OAAAZ,IAAAQ,EAAAG,UAAAX,EAAAW,UAAA,IAAAH,IALqC,GAQrCP,QAAAA,YAAAA,ECRR,IAAAY,mBAAAC,QAAA,sBAGAC,gBAAAD,QAAA,qCAYAE,WAAA,SAAAC,GAAA,SAAAD,IDgBQ,OAAkB,OAAXC,GAAmBA,EAAOC,MAAMT,KAAMU,YAAcV,KCgEnE,OAhFwCX,UAAAkB,EAAAC,GAgBtCD,EAAAL,UAAAS,MAAA,SAAMC,IAEJL,EAAWM,SAAWb,MACjBY,OAASA,EAEdE,QAAQC,IAAI,6BAGZX,mBAAmBY,gBAcrBT,EAAAL,UAAAe,MAAA,SAAML,GAEJZ,KAAKY,OAASA,EACdE,QAAQC,IAAI,+BAedR,EAAAL,UAAAgB,KAAA,SAAKN,GAEHZ,KAAKY,OAASA,EACdE,QAAQC,IAAI,+BAedR,EAAAL,UAAAiB,OAAA,SAAOP,GAELZ,KAAKY,OAASA,EACdE,QAAQC,IAAI,gCAGhBR,EAhFA,CAAwCD,gBAAAc,QDmFxCC,QAAA,QAAqBd","file":"QuickStart.js","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    }\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nexports.__esModule = true;\n// this is the full MCScriptStudioCode api\nvar mcscriptstudiocode = require(\"mcscriptstudiocode\");\n// with @mcscriptstudiocode/ you can load modules from mcscriptstudiocode like the pluginmanager for the pluginapi\nvar pluginmanager_1 = require(\"@mcscriptstudiocode/pluginmanager\");\n/**\n * @class QuickStart\n * @package MCScriptStudioCode Plugin Quick Start\n * @author Minimine\n * @since 0.0.1\n * @version 0.0.1\n *\n * @desc This is the quick start for building a package / plugin for mcscriptstudiocode. It works correctly and will be loaded by the program, but has no realy sencefull features included!\n *\n */\nvar QuickStart = /** @class */ (function (_super) {\n    __extends(QuickStart, _super);\n    function QuickStart() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @function setup\n     * @package MCScriptStudioCode Plugin Quick Start\n     * @author Minimine\n     * @since 0.0.1\n     * @version 0.0.1\n     *\n     * @desc The setup function is called for the setup\n     * @arg server:ServerApi the ServerApi gives usefull functions for the plugins\n     *\n     */\n    QuickStart.prototype.setup = function (server) {\n        QuickStart.instance = this;\n        this.server = server;\n        console.log(\"Quick start plugin loaded\");\n        // For demonstration open the dev tools\n        mcscriptstudiocode.openDevTools();\n    };\n    /**\n     * @function start\n     * @package MCScriptStudioCode Plugin Quick Start\n     * @author Minimine\n     * @since 0.0.1\n     * @version 0.0.1\n     *\n     * @desc the start function starts the plugins. Here you can manipulate elements etc...\n     * @arg server:ServerApi the ServerApi gives usefull functions for the plugins\n     *\n     */\n    QuickStart.prototype.start = function (server) {\n        this.server = server;\n        console.log(\"Quick start plugin started\");\n    };\n    /**\n     * @function stop\n     * @package MCScriptStudioCode Plugin Quick Start\n     * @author Minimine\n     * @since 0.0.1\n     * @version 0.0.1\n     *\n     * @desc the stop function is called for program stop. this does not work always for now\n     * @arg server:ServerApi the ServerApi gives usefull functions for the plugins\n     *\n     */\n    QuickStart.prototype.stop = function (server) {\n        this.server = server;\n        console.log(\"Quick start plugin stopped\");\n    };\n    /**\n     * @function reload\n     * @package MCScriptStudioCode Plugin Quick Start\n     * @author Minimine\n     * @since 0.0.1\n     * @version 0.0.1\n     *\n     * @desc the reload function is called on program stop. this does not work always for now\n     * @arg server:ServerApi the ServerApi gives usefull functions for the plugins\n     *\n     */\n    QuickStart.prototype.reload = function (server) {\n        this.server = server;\n        console.log(\"Quick start plugin reloaded\");\n    };\n    return QuickStart;\n}(pluginmanager_1.Plugin));\nexports[\"default\"] = QuickStart;\n","// this is the full MCScriptStudioCode api\r\nimport * as mcscriptstudiocode from 'mcscriptstudiocode'\r\n\r\n// with @mcscriptstudiocode/ you can load modules from mcscriptstudiocode like the pluginmanager for the pluginapi\r\nimport { ServerApi, Plugin } from \"@mcscriptstudiocode/pluginmanager\";\r\n\r\n/**\r\n * @class QuickStart\r\n * @package MCScriptStudioCode Plugin Quick Start\r\n * @author Minimine\r\n * @since 0.0.1\r\n * @version 0.0.1\r\n *\r\n * @desc This is the quick start for building a package / plugin for mcscriptstudiocode. It works correctly and will be loaded by the program, but has no realy sencefull features included!\r\n *\r\n */\r\nexport default class QuickStart extends Plugin {\r\n\r\n  static instance:Plugin;\r\n  server: ServerApi;\r\n\r\n  /**\r\n   * @function setup\r\n   * @package MCScriptStudioCode Plugin Quick Start\r\n   * @author Minimine\r\n   * @since 0.0.1\r\n   * @version 0.0.1\r\n   *\r\n   * @desc The setup function is called for the setup\r\n   * @arg server:ServerApi the ServerApi gives usefull functions for the plugins\r\n   *\r\n   */\r\n  setup(server: ServerApi) {\r\n\r\n    QuickStart.instance = this;\r\n    this.server = server;\r\n\r\n    console.log(\"Quick start plugin loaded\")\r\n\r\n    // For demonstration open the dev tools\r\n    mcscriptstudiocode.openDevTools();\r\n  }\r\n\r\n  /**\r\n   * @function start\r\n   * @package MCScriptStudioCode Plugin Quick Start\r\n   * @author Minimine\r\n   * @since 0.0.1\r\n   * @version 0.0.1\r\n   *\r\n   * @desc the start function starts the plugins. Here you can manipulate elements etc...\r\n   * @arg server:ServerApi the ServerApi gives usefull functions for the plugins\r\n   *\r\n   */\r\n  start(server: ServerApi) {\r\n\r\n    this.server = server;\r\n    console.log(\"Quick start plugin started\")\r\n\r\n  }\r\n\r\n  /**\r\n   * @function stop\r\n   * @package MCScriptStudioCode Plugin Quick Start\r\n   * @author Minimine\r\n   * @since 0.0.1\r\n   * @version 0.0.1\r\n   *\r\n   * @desc the stop function is called for program stop. this does not work always for now\r\n   * @arg server:ServerApi the ServerApi gives usefull functions for the plugins\r\n   *\r\n   */\r\n  stop(server: ServerApi) {\r\n\r\n    this.server = server;\r\n    console.log(\"Quick start plugin stopped\")\r\n\r\n  }\r\n\r\n  /**\r\n   * @function reload\r\n   * @package MCScriptStudioCode Plugin Quick Start\r\n   * @author Minimine\r\n   * @since 0.0.1\r\n   * @version 0.0.1\r\n   *\r\n   * @desc the reload function is called on program stop. this does not work always for now\r\n   * @arg server:ServerApi the ServerApi gives usefull functions for the plugins\r\n   *\r\n   */\r\n  reload(server: ServerApi) {\r\n\r\n    this.server = server;\r\n    console.log(\"Quick start plugin reloaded\")\r\n\r\n  }\r\n}\r\n"]}